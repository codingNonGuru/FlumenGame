#version 450
#extension GL_ARB_compute_variable_group_size: enable

layout (location = 0) uniform ivec2 offset;
layout (location = 1) uniform uvec2 stencilSize;
layout (location = 2) uniform uvec2 baseSize;
layout (location = 3) uniform float alpha;
layout (location = 4) uniform vec3 color;
layout (location = 6) uniform uint mode;

struct Color {
	float r, g, b;
};

layout (std430, binding = 0) buffer STENCIL {
	float stencil[];
};

layout (std430, binding = 1) buffer COLOR_BASE {
	Color colorBase[];
};

layout (std430, binding = 2) buffer ALPHA_BASE {
	float alphaBase[];
};

layout (std430, binding = 3) buffer RGBA_BASE {
	vec4 rgbaBase[];
};

layout (local_size_x = 4, local_size_y = 4, local_size_z = 1) in;

void main() 
{
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	uint index = y * stencilSize.x + x;
	
	bool isOutbounded = false;
	int baseX = int(x) + offset.x;
	if(baseX >= int(baseSize.x)) 
	{
		baseX -= int(baseSize.x);
		isOutbounded = true;
	} 
	else if(baseX < 0) 
	{
		baseX += int(baseSize.x);
		isOutbounded = true;
	}
	
	int baseY = int(y) + offset.y;
	if(baseY >= int(baseSize.y)) 
	{
		baseY -= int(baseSize.y);
		isOutbounded = true;
	} 
	else if(baseY < 0) 
	{
		baseY += int(baseSize.y);
		isOutbounded = true;
	}
	uint baseIndex = uint(baseY) * baseSize.x + uint(baseX);
	
	float finalAlpha = stencil[index] * alpha;
	if(isOutbounded)
		finalAlpha = 0.0f;
		
	if(mode == 0) 
	{ //COLOR MODE
		colorBase[baseIndex].r = finalAlpha * color.r + colorBase[baseIndex].r * (1.0f - finalAlpha);
		colorBase[baseIndex].g = finalAlpha * color.g + colorBase[baseIndex].g * (1.0f - finalAlpha);
		colorBase[baseIndex].b = finalAlpha * color.b + colorBase[baseIndex].b * (1.0f - finalAlpha);
	} 
	else if(mode == 1) 
	{ //ALPHA MODE
		alphaBase[baseIndex] = finalAlpha * color.r + alphaBase[baseIndex] * (1.0f - finalAlpha);
	} 
	else if(mode == 2) 
	{ //RGBA MODE
		rgbaBase[baseIndex].r = finalAlpha * color.r + rgbaBase[baseIndex].r * (1.0f - finalAlpha);
		rgbaBase[baseIndex].g = finalAlpha * color.g + rgbaBase[baseIndex].g * (1.0f - finalAlpha);
		rgbaBase[baseIndex].b = finalAlpha * color.b + rgbaBase[baseIndex].b * (1.0f - finalAlpha);
	}
}