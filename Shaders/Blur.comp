#version 450
#extension GL_ARB_compute_variable_group_size: enable

layout (location = 0) uniform int pass;
layout (location = 1) uniform ivec2 size;
layout (location = 2) uniform int filterSize;
layout (location = 3) uniform int hasBorder;

layout (std430, binding = 0) buffer INPUT 
{
	float inputs[];
};

layout (std430, binding = 1) buffer SWAP 
{
	float swap[];
};

layout (std430, binding = 2) buffer OUTPUT 
{
	float outputs[];
};

layout (std430, binding = 3) buffer FILTER 
{
	float weights[];
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

uint getIndex()
{
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	return y * size.x + x;
}

void horizontalPass() 
{
	uint thisIndex = getIndex();

	float sum = 0.0f;
	for(int i = -filterSize; i <= filterSize; ++i) 
	{
		int otherX = int(gl_GlobalInvocationID.x) + i;
		uint otherY = gl_GlobalInvocationID.y;
		uint otherIndex = otherY * size.x + otherX;

		bool isOut = otherX < 0 || otherX >= size.x;
		if(isOut)
		{
			if(hasBorder == 1)
				continue;
			else
			{
				if(otherX < 0)
					otherX += size.x;
				else
					otherX -= size.x;

				otherIndex = otherY * size.x + otherX;
			}
		}

		float finalValue = inputs[otherIndex];
		sum += weights[i + filterSize] * finalValue; 	
	}
	swap[thisIndex] = sum;
}

void verticalPass() 
{
	uint thisIndex = getIndex();

	float sum = 0.0f;
	for(int i = -filterSize; i <= filterSize; ++i) 
	{
		uint otherX = gl_GlobalInvocationID.x;
		int otherY = int(gl_GlobalInvocationID.y) + i;
		uint otherIndex = otherY * size.x + otherX;

		bool isOut = otherY < 0 || otherY >= size.y;
		if(isOut)
		{
			if(hasBorder == 1)
				continue;
			else
			{
				if(otherY < 0)
					otherY += size.y;
				else
					otherY -= size.y;

				otherIndex = otherY * size.x + otherX;
			}
		}
		
		float finalValue = swap[otherIndex];
		sum += weights[i + filterSize] * finalValue; 	
	}
	outputs[thisIndex] = sum;
}

void main()
{
	if(pass == 0)
	{
		horizontalPass();
	}
	else
	{
		verticalPass();
	}
}


