#version 450
#extension GL_ARB_compute_variable_group_size: enable
#extension GL_ARB_gpu_shader_int64 : enable

layout (location = 1) uniform ivec2 size;
layout (location = 2) uniform int exponent;
layout (location = 3) uniform uint octaveCount;
layout (location = 4) uniform uint timeSeed;
layout (location = 6) uniform vec2 range;
layout (location = 7) uniform float strongestOctave;
layout (location = 9) uniform float contrast;
layout (location = 10) uniform float contrastStrength;

layout (std430, binding = 0) buffer RESULT 
{
	float result[];
};

layout (std430, binding = 1) buffer STREAM 
{
	float randomNumberStream[];
};

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

uint shuffle(uint seed) 
{
	seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

uint GetIndex()
{
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y; 
	return y * size.x + x;
}

float getRandomValue(uint seed_x, float min, float max) 
{
	uint seed = shuffle(seed_x);
	
	float value = randomNumberStream[seed / 256] * (max - min) + min;
	return value;
}

const float octaveFalloff = 0.25f;

vec2 getGradient(uint x, uint y, int order)
{
	if(x == size.x)
		x = 0;
	if(y == size.y)
		y = 0; 

	uint shrinkedIndex = (y / order) * (((size.x - 1) / order) + 1) + x / order;

	float angle = getRandomValue(timeSeed + shrinkedIndex, 0.0f, 6.2831f * 2.0f);
	float radius = 1.0f; 
	return vec2(cos(angle) * radius, sin(angle) * radius);
}

float Fade(float t) 
{
	return t * t * t * (t * (t * 6.0f - 15.0f) + 10.0f);
}

float getOctave(int order) 
{
	int x = int(gl_GlobalInvocationID.x);
	int y = int(gl_GlobalInvocationID.y);
	uint index = GetIndex();

	float modifier = float(order) * 1.41f;
	vec2 upperLeftDirection = vec2(x % order, -(y % order)) / modifier;
	vec2 upperRightDirection = vec2(x % order - order, -(y % order)) / modifier;
	vec2 lowerLeftDirection = vec2(x % order, order - (y % order)) / modifier;
	vec2 lowerRightDirection = vec2(x % order - order, order - (y % order)) / modifier;
	
	vec2 upperLeft = getGradient(x - (x % order), y - (y % order), order);
	vec2 upperRight = getGradient(order + x - (x % order), y - (y % order), order);
	vec2 lowerLeft = getGradient(x - (x % order), order + y - (y % order), order);
	vec2 lowerRight = getGradient(order + x - (x % order), order + y - (y % order), order);

	float upperLeftResult = dot(upperLeft, upperLeftDirection);
	float upperRightResult = dot(upperRight, upperRightDirection);
	float lowerLeftResult = dot(lowerLeft, lowerLeftDirection);
	float lowerRightResult = dot(lowerRight, lowerRightDirection);
	
	float horizontalFactor = float(x % order) / float(order);
	horizontalFactor = Fade(horizontalFactor);
	float verticalFactor = float(y % order) / float(order);
	verticalFactor = Fade(verticalFactor);
	
	float upperFactor = upperLeftResult * (1.0f - horizontalFactor) + upperRightResult * horizontalFactor;
	float lowerFactor = lowerLeftResult * (1.0f - horizontalFactor) + lowerRightResult * horizontalFactor;

	float finalFactor = upperFactor * (1.0f - verticalFactor) + lowerFactor * verticalFactor;

	return finalFactor;
}

void main() 
{
	uint index = GetIndex();

	int order = 1;
	for(int i = 0; i < exponent; i++) order *= 2;

	float sum = 0.0f;
	for(uint octaveIndex = octaveCount; octaveIndex > 0; octaveIndex--, order /= 2)
	{
		float normalizedCurrent = 1.0f - float(octaveIndex) / float(octaveCount);
		float variation = exp(-pow(normalizedCurrent - strongestOctave, 2.0f) / (2.0f * pow(octaveFalloff, 2.0f)));

		float octave = getOctave(order);
		octave *= variation;

		sum += octave;
	}

	sum /= float(octaveCount);
	sum = sum * 0.5f + 0.5f;

	sum = clamp(sum, 0.0f, 1.0f);
	sum = pow(sum, pow(contrastStrength, 32.0f * contrast - 32.0f * sum));

	result[index] = sum;
}